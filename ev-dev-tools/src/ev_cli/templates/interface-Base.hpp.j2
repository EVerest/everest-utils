{% from "helper_macros.j2" import handle_cmd_signature, publish_var_signature, list_json_types, var_to_cpp, var_to_any, print_template_info, print_spdx_line, string_to_enum, enum_to_string %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

{{ print_template_info('3') }}

#include <framework/ModuleAdapter.hpp>
#include <utils/types.hpp>
#include <utils/error.hpp>

#include "Types.hpp"

class {{ info.class_name }} : public Everest::ImplementationBase {
public:
    {{ info.class_name }}(Everest::ModuleAdapter* ev, const std::string& name) : Everest::ImplementationBase(), _ev(ev), _name(name) {};

    {% if not vars %}
    // no variables defined for this interface
    {% else %}
    // publish functions for variables
    {% for var in vars %}
    void publish_{{ var.name }}(
    {%- if 'object_type' in var %}
        {{-  var.object_type }}
    {%- elif 'enum_type' in var %}
        {{-  var.enum_type }}
    {%- else %}
        {{-  var.cpp_type }}
    {%- endif -%}
    {{ ' value) {' }}
    {% if 'object_type' in var %}
        json json_value = value;
        Object object_value = json_value;
        _ev->publish(_name, "{{ var.name }}", object_value);
    {% elif 'enum_type' in var %}
        auto value_string = {{ enum_to_string(var.enum_type) }}(value);
        _ev->publish(_name, "{{ var.name }}", value_string);
    {% else %}
        _ev->publish(_name, "{{ var.name }}", value);
    {% endif %}
    }
    {% endfor %}
    {% endif %}

    {% if not errors %}
    // no errors defined for this interface
    {% else %}
    // raise functions for errors
    {% for error in errors %}
    Everest::error::ErrorHandle raise_{{ error.namespace }}_{{ error.name }}(const std::string& message, const Everest::error::Severity& severity=Everest::error::Severity::Low) {
        return _ev->raise_error(
            _name,
            "{{ error.namespace }}/{{ error.name }}",
            message,
            severity
        );
    }
    {% endfor %}
    // request clear functions for errors
    {% for error in errors %}
    void request_clear_all_{{ error.namespace }}_{{ error.name }}() {
        _ev->request_clear_all_errors_of_type_of_module(_name, "{{ error.namespace }}/{{ error.name }}");
    }
    {% endfor %}
    void request_clear_error(const Everest::error::ErrorHandle& handle) {
        _ev->request_clear_error_uuid(_name, handle);
    }
    void request_clear_all_errors() {
        _ev->request_clear_all_errors_of_module(_name);
    }
    {% endif %}

protected:
    {% if not cmds %}
    // no commands defined for this interface
    {% else %}
    // command handler functions (virtual)
    {% for cmd in cmds %}
    {{ handle_cmd_signature(cmd, none, info.interface_name) }} = 0;
    {% endfor %}
    {% endif %}

private:
    Everest::ModuleAdapter* const _ev;
    const std::string _name;

    // helper function for getting all commands
    void _gather_cmds(std::vector<Everest::cmd>& cmds) override {
    {% if not cmds %}
        // this interface does not offer any commands
    {% else %}
        {% for cmd in cmds %}
        // {{ cmd.name }} command
        Everest::cmd {{ cmd.name }}_cmd;
        {{ cmd.name }}_cmd.impl_id = _name;
        {{ cmd.name }}_cmd.cmd_name = "{{ cmd.name }}";
        {% if not cmd.args %}
        // cmd {{ cmd.name }} has no arguments
        {% else %}
        {{ cmd.name }}_cmd.arg_types = {
            {% for arg in cmd.args %}
            {"{{ arg.name }}", {{ list_json_types(arg.json_type) + '}' }}{{ ',' if not loop.last }}
            {% endfor %}
        };
        {% endif %}
        {{ cmd.name }}_cmd.cmd = [this](Parameters args) -> Result {
        {% for arg in cmd.args %}
            {% if 'object_type' in arg %}
            {{ arg.object_type }} {{ arg.name }} = args["{{ arg.name }}"];
            {% elif 'enum_type' in arg %}
            auto {{ arg.name }} = {{ string_to_enum(arg.enum_type) }}(args["{{ arg.name }}"]);
            {% elif 'array_type' in arg %}
            json {{ arg.name }}_json_array = args["{{ arg.name }}"];
                {% if 'array_type_contains_enum' in arg %}
                std::vector<{{ arg.array_type }}> {{ arg.name }};
                for (auto entry : {{ arg.name }}_json_array) {
                    {{ arg.name }}.push_back({{ string_to_enum(arg.array_type) }}(entry));
                }
                {% else %}
                std::vector<{{ arg.array_type }}> {{ arg.name }} = args["{{ arg.name }}"];
                {% endif %}
            {% else %}
            auto {{ arg.name }} = {{ var_to_cpp(arg) }}(args["{{ arg.name }}"]);
            {% endif %}
        {% else %}
            (void) args; // no arguments used for this callback
        {% endfor %}

            {{ 'auto result = ' if cmd.result }}this->handle_{{ cmd.name }}(
                {%- for arg in cmd.args -%}
                {{ arg.name }}{{ ', ' if not loop.last }}
                {%- endfor -%}
            );
        {% if cmd.result and 'object_type' in cmd.result %}
            return result;
        {% elif cmd.result and 'enum_type' in cmd.result %}
            return {{ enum_to_string(cmd.result.enum_type) }}(result);
        {% else %}
            return {{ var_to_any(cmd.result, 'result') if cmd.result else 'nullptr'}};
        {% endif %}
        };
        {% if cmd.result %}
        {{ cmd.name }}_cmd.return_type = {{ list_json_types(cmd.result.json_type) }};
        {% endif %}
        cmds.emplace_back(std::move({{ cmd.name }}_cmd));
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
    {% endif %}
    };
};

#endif // {{ info.hpp_guard }}
