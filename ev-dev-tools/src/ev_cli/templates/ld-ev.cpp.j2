{% from "helper_macros.j2" import print_template_info, var_to_cpp, print_spdx_line %}
{{ print_spdx_line('Apache-2.0') }}
{{ print_template_info('4') }}

#include "{{ info.ld_ev_header }}"

#include "{{ info.module_header }}"
{% for impl in provides %}
#include "{{ impl.class_header }}"
{% endfor %}

#include <framework/runtime.hpp>
#include <utils/types.hpp>

{% if info.enable_global_errors %}
#include <utils/error/error_manager_req_global.hpp>

{% endif %}
namespace module {

// FIXME (aw): could this way of keeping static variables be changed somehow?
static Everest::ModuleAdapter adapter {};
static Everest::PtrContainer<{{info.class_name }}> mod_ptr {};

// per module configs
{# FIXME (aw): instead of being static, this could also be inside a map #}
{% for impl in provides %}
static {{ impl.id }}::Conf {{ impl.id }}_config;
{% endfor %}
static Conf module_conf;
static ModuleInfo module_info;

{% if info.enable_global_errors %}
void subscribe_global_all_errors(
    const Everest::error::ErrorCallback& callback,
    const Everest::error::ErrorCallback& clear_callback
) {
    adapter.get_global_error_manager()->subscribe_global_all_errors(callback, clear_callback);
}

std::shared_ptr<Everest::error::ErrorStateMonitor> get_global_error_state_monitor() {
    return adapter.get_global_error_state_monitor();
}

{% endif %}
void LdEverest::init(ModuleConfigs module_configs, const ModuleInfo& mod_info) {
    EVLOG_debug << "init() called on module {{ info.name }}";

    // populate config for provided implementations
    {% for impl in provides %}
    auto {{ impl.id }}_config_input = std::move(module_configs["{{ impl.id }}"]);
    {% for item in impl.config %}
    {{ impl.id }}_config.{{ item.name }} = std::get<{{ item.cpp_type }}>({{ impl.id }}_config_input["{{ item.name }}"]);
    {% endfor %}

    {% endfor %}
    {% if info.module_config|length %}

    {% for item in info.module_config %}
    module_conf.{{ item.name }} = std::get<{{ item.cpp_type }}>(module_configs["!module"]["{{ item.name }}"]);
    {% endfor %}
    {% endif %}

    module_info = mod_info;

    mod_ptr->init();
}

void LdEverest::ready() {
    EVLOG_debug << "ready() called on module {{ info.name }}";
    mod_ptr->ready();
}

void register_module_adapter(Everest::ModuleAdapter module_adapter) {
    adapter = std::move(module_adapter);
}

std::vector<Everest::cmd> everest_register(const json& connections) {
    EVLOG_debug << "everest_register() called on module {{ info.name }}";

    adapter.check_complete();

    {% for impl in provides %}
    auto p_{{ impl.id }} = std::make_unique<{{ impl.id }}::{{ impl.class_name }}>(&adapter, mod_ptr, {{ impl.id }}_config);
    adapter.gather_cmds(*p_{{ impl.id }});

    {% endfor %}
    {% for requirement in requires %}
    {# FIXME: needs refactoring #}
    {% if requirement.is_vector %}
    auto r_{{ requirement.id }} = std::vector<std::unique_ptr<{{ requirement.class_name }}>>();
    if (connections.contains("{{ requirement.id }}")) {
        auto requirement_connection = connections.at("{{ requirement.id }}");
        for (size_t idx = 0; idx < requirement_connection.size(); idx++) {
            auto requirement_module_id = requirement_connection[idx].at("module_id");
            r_{{ requirement.id }}.emplace_back(std::make_unique<{{ requirement.class_name }}>(&adapter, Requirement{"{{ requirement.id }}", idx}, requirement_module_id));
        }
    }
    {% else %}
    std::string r_{{ requirement.id }}_requirement_module_id;
    if (connections.contains("{{ requirement.id }}")) {
        auto requirement_connection = connections.at("{{ requirement.id }}");
        if (requirement_connection.size() > 0) {
            r_{{ requirement.id }}_requirement_module_id = requirement_connection[0].at("module_id");
        }
    }
    auto r_{{ requirement.id }} = std::make_unique<{{ requirement.class_name }}>(&adapter, Requirement{"{{ requirement.id }}", 0}, r_{{ requirement.id }}_requirement_module_id);
    {% endif %}
    {% else %}
        (void) connections; // no requirements -> unused connections
    {% endfor %}

    {% if info.enable_external_mqtt %}
    static Everest::MqttProvider mqtt_provider(adapter);
    {% endif %}
    static Everest::TelemetryProvider telemetry_provider(adapter);

    static {{ info.class_name }} module(
    module_info,
    {%- if info.enable_external_mqtt %}mqtt_provider, {% endif -%}
    {%- if info.enable_telemetry %}telemetry_provider, {% endif -%}
    {%- for impl in provides -%}
    std::move(p_{{ impl.id }}){{ ', ' }}
    {%- endfor -%}
    {%- for requirement in requires -%}
    std::move(r_{{ requirement.id }}){{ ', ' }}
    {%- endfor -%}
    module_conf);

    mod_ptr.set(&module);

    return adapter.registered_commands;
}

} // namespace module

int main(int argc, char* argv[]) {
    auto module_loader = Everest::ModuleLoader(argc, argv, Everest::ModuleCallbacks(
        module::register_module_adapter, module::everest_register,
        module::LdEverest::init, module::LdEverest::ready));

    return module_loader.initialize();
}
