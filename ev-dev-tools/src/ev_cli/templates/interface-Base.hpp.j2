{% from "helper_macros.j2" import handle_cmd_signature, publish_var_signature, list_json_types, var_to_cpp, var_to_any, print_template_info, print_spdx_line, string_to_enum, enum_to_string %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

{{ print_template_info('3') }}

#include <framework/ModuleAdapter.hpp>

#include "Types.hpp"

class {{ info.class_name }} : public Everest::ImplementationBase {
public:
    {{ info.class_name }}(Everest::ModuleAdapter* ev, const std::string& name) : Everest::ImplementationBase(), _ev(ev), _name(name) {};

    {% if not vars %}
    // no variables defined for this interface
    {% else %}
    // publish functions for variables
    {% for var in vars %}
    void publish_{{ var.name }}(
    {% if 'object_type' in var %}
        {{  var.object_type }}
    {% elif 'enum_type' in var %}
        {{  var.enum_type }}
    {% else %}
        {{  var.cpp_type }}
    {% endif %}
     value) {
    {% if 'object_type' in var %}
        json json_value = value;
        Object object_value = json_value;
        _ev->publish(_name, "{{ var.name }}", object_value);
    {% elif 'enum_type' in var %}
        auto value_string = {{ enum_to_string(var.enum_type) }}(value);
        _ev->publish(_name, "{{ var.name }}", value_string);
    {% else %}
        _ev->publish(_name, "{{ var.name }}", value);
    {% endif %}
    }
    {% endfor %}
    {% endif %}

protected:
    {% if not cmds %}
    // no commands defined for this interface
    {% else %}
    // command handler functions (virtual)
    {% for cmd in cmds %}
    {{ handle_cmd_signature(cmd, none, info.interface_name) }} = 0;
    {% endfor %}
    {% endif %}

private:
    Everest::ModuleAdapter* const _ev;
    const std::string _name;

    // helper function for getting all commands
    void _gather_cmds(std::vector<Everest::cmd>& cmds) override {
    {% if not cmds %}
        // this interface does not offer any commands
    {% else %}
        {% for cmd in cmds %}
        // {{ cmd.name }} command
        Everest::cmd {{ cmd.name }}_cmd;
        {{ cmd.name }}_cmd.impl_id = _name;
        {{ cmd.name }}_cmd.cmd_name = "{{ cmd.name }}";
        {% if not cmd.args %}
        // cmd {{ cmd.name }} has no arguments
        {% else %}
        {{ cmd.name }}_cmd.arg_types = {
            {% for arg in cmd.args %}
            {"{{ arg.name }}", {{ list_json_types(arg.json_type) + '}' }}{{ ',' if not loop.last }}
            {% endfor %}
        };
        {% endif %}
        {{ cmd.name }}_cmd.cmd = [this](Parameters args) -> Result {
            {% for arg in cmd.args %}
                {% if 'object_type' in arg %}
                    json {{ arg.name }}_json_object = boost::any_cast<Object>(args["{{ arg.name }}"]);
                    {{ arg.object_type }} {{ arg.name }} = {{ arg.name }}_json_object;
                {% elif 'enum_type' in arg %}
                    auto {{ arg.name }}_string = {{ var_to_cpp(arg) }}(args["{{ arg.name }}"]);
                    auto {{ arg.name }} = {{ string_to_enum(arg.enum_type) }}({{ arg.name }}_string);
                {% elif 'array_type' in arg %}
                    json {{ arg.name }}_json_array = boost::any_cast<Array>(args["{{ arg.name }}"]);
                    std::vector<{{ arg.array_type }}> {{ arg.name }} = {{ arg.name }}_json_array;
                {% else %}
                    auto {{ arg.name }} = {{ var_to_cpp(arg) }}(args["{{ arg.name }}"]);
                {% endif %}
            {% endfor %}

            {{ 'auto result = ' if cmd.result }}this->handle_{{ cmd.name }}(
                {%- for arg in cmd.args -%}
                {{ arg.name }}{{ ', ' if not loop.last }}
                {%- endfor -%}
            );
            {% if cmd.result and 'object_type' in cmd.result %}
                json json_result = result;
                Object object_result = json_result;
                return boost::any(object_result);
            {% elif cmd.result and 'enum_type' in cmd.result %}
                auto result_string = {{ enum_to_string(cmd.result.enum_type) }}(result);
                return boost::any(result_string);
            {% else %}
                return {{ var_to_any(cmd.result, 'result') if cmd.result else 'boost::none'}};
            {% endif %}

        };
        {% if cmd.result %}
        {{ cmd.name }}_cmd.return_type = {{ list_json_types(cmd.result.json_type) }};
        {% endif %}
        cmds.emplace_back(std::move({{ cmd.name }}_cmd));
        {% if not loop.last %}

        {% endif %}
        {% endfor %}
    {% endif %}
    };
};

#endif // {{ info.hpp_guard }}
